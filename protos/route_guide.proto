syntax="proto3";

service RouteGuide {
  // Obtains the feature at a given position
  // Client calls the service in the stub and the server gets features, then returns to the client.
  // Just like a function call.
  rpc GetFeature(Point) returns (Feature) {}

  // Obtains the Features available within the given Rectangle.
  // Results are streamed rather than retured at once.
  rpc ListFeatures(Rectangle) returns (stream Feature) {}

  // Accepts a stream of points on a route being traversed, returning a RouteSummury when
  // traversal is done.
  rpc RecordRoute(stream Point) returns (RouteSummary) {}

  // Accepts a stream of RouteNotes while a route is been traversed,
  // while receiving other RouteNotes.
  rpc RouteChat(stream RouteNote) returns (stream RouteNote) {}
}


// Points are represented as latitude-longitude pairs in the E7 representation
// (degrees multiplied by 10**7 and rounded to the nearest integer).
// Latitude should be in the range +/- 90 degrees and longitude should be in the 
// range +/- 180 degrees (inclusive)
message Point {
  int32 latitude = 1;
  int32 longitude = 2;
}

// A latitude-longitude rectangle, represented as two diagonally opposite points
// "lo" and "hi"
message Rectangle {
  // One corner of the rectangle.
  Point lo = 1;

  // The other corner of the rectangle.
  Point hi = 2;
}

// A feature names something at a given point.
//
// If a feature could not be named, the name is empty.
message Feature {
  // The name of the feature.
  string name = 1;

  // The point where the feature is detected.
  Point location = 2;
}

// A RouteNote is a message sent while at a given point.
message RouteNote {
  // The location from which the message is sent.
  Point location = 1;

  // The message to be sent.
  string message = 2;
}

// A RouteSummary is received in response to a RecordRoute rpc
//
// It contais the number of individual points received, the number of detected features,
// and the total distance covered as the cumulative sum of the distance between each
// point.
message RouteSummary {
  // the number of points received.
  int32 point_count = 1;

  // The number of known features passed while traversing the route.
  int32 feature_count = 2;

  // The distance covered in metres.
  int32 distance = 3;

   // The duration of the traversal in seconds.
  int32 elapsed_time = 4;
}
